setwd("/Users/hputnam/MyProjects/Geoduck_Epi/project_larval_geoduck_OA/RAnalysis/Data/") #set working directory
#project-geoduck-oa
#Data from Roberts et al NOAA OA
#last modified 20160320 H Putnam
rm(list=ls()) # removes all prior objects
#Read in required libraries
library("seacarb") #seawater carbonate chemistry
library("reshape") #reshape data
library("plotrix") #functions in tapply
#############################################################
setwd("/Users/hputnam/MyProjects/Geoduck_Epi/project_larval_geoduck_OA/RAnalysis/Data/") #set working directory
larval.counts <- read.csv("Larval_Counts_Trial3.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
larval.counts$Avg.Live <- rowMeans(larval.counts[,c("Live1",  "Live2",  "Live3",	"Live4", "Live5")], na.rm = TRUE) #calculate average of counts
larval.counts$Avg.Dead <- rowMeans(larval.counts[,c("Dead1",  "Dead2",  "Dead3",  "Dead4", "Dead5")], na.rm = TRUE) #calculate average of counts
larval.counts$Live.cells.ml <- larval.counts$Avg.Live/larval.counts$Volume.Counted.ml #calculate density
larval.counts$Dead.cells.ml <- larval.counts$Avg.Dead/larval.counts$Volume.Counted.ml #calculate density
larval.counts$total.live.larvae <- larval.counts$Live.cells.ml*larval.counts$Vol.Tripour
larval.counts$total.dead.larvae <- larval.counts$Dead.cells.ml*larval.counts$Vol.Tripour
larval.counts$per.sur <- ((larval.counts$total.live.larvae/(larval.counts$total.live.larvae[1]))*100)
larval.counts <- read.csv("Larval_Counts_Trial3.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
View(larval.counts)
larval.counts$Avg.Live <- rowMeans(larval.counts[,c("Live1",  "Live2",  "Live3")], na.rm = TRUE) #calculate average of counts
larval.counts$Avg.Dead <- rowMeans(larval.counts[,c("Dead1",  "Dead2",  "Dead3")], na.rm = TRUE) #calculate average of counts
larval.counts$Live.cells.ml <- larval.counts$Avg.Live/larval.counts$Volume.Counted.ml #calculate density
larval.counts$Dead.cells.ml <- larval.counts$Avg.Dead/larval.counts$Volume.Counted.ml #calculate density
larval.counts$total.live.larvae <- larval.counts$Live.cells.ml*larval.counts$Vol.Tripour
larval.counts$total.dead.larvae <- larval.counts$Dead.cells.ml*larval.counts$Vol.Tripour
larval.counts$per.sur <- ((larval.counts$total.live.larvae/(larval.counts$total.live.larvae[1]))*100)
#calculate mean and se of live larvae
larval.counts.means <- aggregate(total.live.larvae ~ Part*Time*Treatment, data=larval.counts, mean)
larval.counts.ses <- aggregate(total.live.larvae ~ Part*Time*Treatment, data=larval.counts, std.error)
means <- cbind(larval.counts.means, larval.counts.ses$total.live.larvae) #create dataframe
colnames(means) <- c("Part", "Time", "Treatment","mean","se") #rename columns
larval.counts.means <- aggregate(total.live.larvae ~ Time*Treatment, data=larval.counts, mean)
larval.counts.ses <- aggregate(total.live.larvae ~ Time*Treatment, data=larval.counts, std.error)
means <- cbind(larval.counts.means, larval.counts.ses$total.live.larvae) #create dataframe
larval.counts.means <- aggregate(total.live.larvae ~ Day*Treatment, data=larval.counts, mean)
larval.counts.ses <- aggregate(total.live.larvae ~ Day*Treatment, data=larval.counts, std.error)
means <- cbind(larval.counts.means, larval.counts.ses$total.live.larvae) #create dataframe
View(means)
colnames(means) <- c("Day", "Treatment","mean","se") #rename columns
larval.survival.means <- aggregate(per.sur ~ Day*Treatment, data=larval.counts, mean)
larval.survival.ses <- aggregate(per.sur ~ Day*Treatment, data=larval.counts, std.error)
sur.means <- cbind(larval.survival.means, larval.survival.ses$per.sur) #create dataframe
larval.survival.means <- aggregate(per.sur ~ Day*Treatment, data=larval.counts, mean)
larval.survival.ses <- aggregate(per.sur ~ Day*Treatment, data=larval.counts, std.error)
sur.means <- cbind(larval.survival.means, larval.survival.ses$per.sur) #create dataframe
colnames(sur.means) <- c("Day", "Treatment","mean","se") #rename columns
#plot survivorship
Fig.Survivorship <- ggplot(sur.means, aes(x=Day, y=mean, group=Treatment)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.1, position = position_dodge(width = 0.2)) + #plot sem
geom_point(aes(shape=Treatment), position = position_dodge(width = 0.2), size=2) + #plot points
scale_shape_manual(values=c(16,17,15,17)) +
geom_line(aes(linetype=Treatment), position = position_dodge(width = 0.2), size = 0.5) + #add lines
scale_x_discrete(limits=c("Time0", "Time1", "Time2", "Time3", "Time4", "Time5"))+
xlab("Time") + #Label the X Axis
ylab("% Survivorship") + #Label the Y Axis
theme_bw() + #Set the background color
theme(axis.line = element_line(color = 'black'), #Set the axes color
axis.title=element_text(size=14,face="bold"), #Set axis format
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), #Set the text angle
panel.border = element_blank(), #Set the border
axis.line.x = element_line(color = 'black'), #Set the axes color
axis.line.y = element_line(color = 'black'), #Set the axes color
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background =element_blank(), #Set the plot background
legend.key = element_blank(), #Set plot legend key
legend.position=c(0.8,0.6)) #set legend position
Fig.Survivorship
library(ggplot2)
library(ggplot2)
#plot survivorship
Fig.Survivorship <- ggplot(sur.means, aes(x=Day, y=mean, group=Treatment)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.1, position = position_dodge(width = 0.2)) + #plot sem
geom_point(aes(shape=Treatment), position = position_dodge(width = 0.2), size=2) + #plot points
scale_shape_manual(values=c(16,17,15,17)) +
geom_line(aes(linetype=Treatment), position = position_dodge(width = 0.2), size = 0.5) + #add lines
scale_x_discrete(limits=c("Time0", "Time1", "Time2", "Time3", "Time4", "Time5"))+
xlab("Time") + #Label the X Axis
ylab("% Survivorship") + #Label the Y Axis
theme_bw() + #Set the background color
theme(axis.line = element_line(color = 'black'), #Set the axes color
axis.title=element_text(size=14,face="bold"), #Set axis format
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), #Set the text angle
panel.border = element_blank(), #Set the border
axis.line.x = element_line(color = 'black'), #Set the axes color
axis.line.y = element_line(color = 'black'), #Set the axes color
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background =element_blank(), #Set the plot background
legend.key = element_blank(), #Set plot legend key
legend.position=c(0.8,0.6)) #set legend position
Fig.Survivorship
larval.survival.means
Fig.Survivorship <- ggplot(sur.means, aes(x=Day, y=mean, group=Treatment)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.1, position = position_dodge(width = 0.2)) + #plot sem
geom_point(aes(shape=Treatment), position = position_dodge(width = 0.2), size=2) + #plot points
scale_shape_manual(values=c(16,17,15,17)) +
geom_line(aes(linetype=Treatment), position = position_dodge(width = 0.2), size = 0.5) + #add lines
#scale_x_discrete(limits=c("Time0", "Time1", "Time2", "Time3", "Time4", "Time5"))+
xlab("Time") + #Label the X Axis
ylab("% Survivorship") + #Label the Y Axis
theme_bw() + #Set the background color
theme(axis.line = element_line(color = 'black'), #Set the axes color
axis.title=element_text(size=14,face="bold"), #Set axis format
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), #Set the text angle
panel.border = element_blank(), #Set the border
axis.line.x = element_line(color = 'black'), #Set the axes color
axis.line.y = element_line(color = 'black'), #Set the axes color
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background =element_blank(), #Set the plot background
legend.key = element_blank(), #Set plot legend key
legend.position=c(0.8,0.6)) #set legend position
Fig.Survivorship
#check the variation in the scale between pictures
CV.mean <- aggregate(Scale ~ Tube.ID, data=size, mean, na.rm=TRUE) #calculate mean
CV.sd <- aggregate(Scale ~ Tube.ID, data=size, sd, na.rm=TRUE) #calculate standard deviation
CVs <- cbind(CV.mean, CV.sd$Scale) # merge mean and sd into dataframe
colnames(CVs) <- c("Tube.ID",  "Mean.Scale",  "SD.Scale") #rename the columns of the dataframe
CVs$CV <- (CVs$SD.Scale/CVs$Mean.Scale)*100 #calculate CV of the scale bar measurements
range(CVs$CV) #display min and max of scale CV within a tube
Grand.CV <- (sd(na.omit(size$Scale))/mean(na.omit(size$Scale)))*100#calcualte the overall CV
Grand.CV #coefficient of variation in scale bar between all samples ~2%
#####Larval Size#####
size <- read.csv("OA_Size_Larval_Geoduck.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
info <- read.csv("Larval_Sample.Info.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
#check the variation in the scale between pictures
CV.mean <- aggregate(Scale ~ Tube.ID, data=size, mean, na.rm=TRUE) #calculate mean
CV.sd <- aggregate(Scale ~ Tube.ID, data=size, sd, na.rm=TRUE) #calculate standard deviation
CVs <- cbind(CV.mean, CV.sd$Scale) # merge mean and sd into dataframe
colnames(CVs) <- c("Tube.ID",  "Mean.Scale",  "SD.Scale") #rename the columns of the dataframe
CVs$CV <- (CVs$SD.Scale/CVs$Mean.Scale)*100 #calculate CV of the scale bar measurements
range(CVs$CV) #display min and max of scale CV within a tube
Grand.CV <- (sd(na.omit(size$Scale))/mean(na.omit(size$Scale)))*100#calcualte the overall CV
Grand.CV #coefficient of variation in scale bar between all samples ~2%
data <- merge(size, info, by="Tube.ID") #merge data and info
data$Ratio <- data$Width/data$Length #calcualte width to length ratio
means <- aggregate(cbind(Length, Width,Area, Ratio)  ~ Treatment*Time*Trial, data=data, mean, na.rm=TRUE) #calculate mean
ses <- aggregate(cbind(Length, Width,Area, Ratio) ~ Treatment*Time*Trial, data=data, std.error, na.rm=TRUE) #calculate standard error
sizes <- cbind(means, ses$Length, ses$Width, ses$Area, ses$Ratio)
colnames(sizes) <- c("Treatment","Time", "Trial", "Length", "Width", "Area", "Ratio", "Length.se", "Width.se", "Area.se", "Ratio.se")
Fig.Length <- ggplot(sizes, aes(x=Time, y=Length, group=Treatment)) +
geom_errorbar(aes(ymin=Length-Length.se, ymax=Length+Length.se), colour="black", width=.1, position = position_dodge(width = 0.2)) + #plot sem
geom_point(aes(shape=Treatment), position = position_dodge(width = 0.2), size=2) + #plot points
geom_line(aes(linetype=Treatment), position = position_dodge(width = 0.2), size = 0.5) + #add lines
xlab("Time") + #Label the X Axis
ylab("Shell Length mm") + #Label the Y Axis
theme_bw() + #Set the background color
theme(axis.line = element_line(color = 'black'), #Set the axes color
axis.title=element_text(size=14,face="bold"), #Set axis format
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), #Set the text angle
panel.border = element_blank(), #Set the border
axis.line.x = element_line(color = 'black'), #Set the axes color
axis.line.y = element_line(color = 'black'), #Set the axes color
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background =element_blank(), #Set the plot background
legend.key = element_blank(), #Set plot legend key
legend.position=c(0.8,0.3)) #set legend position
Fig.Length
size <- read.csv("OA_Size_Larval_Geoduck_Trial3.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
info <- read.csv("Larval_Sample.Info.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
#check the variation in the scale between pictures
CV.mean <- aggregate(Scale ~ Tube.ID, data=size, mean, na.rm=TRUE) #calculate mean
CV.sd <- aggregate(Scale ~ Tube.ID, data=size, sd, na.rm=TRUE) #calculate standard deviation
CVs <- cbind(CV.mean, CV.sd$Scale) # merge mean and sd into dataframe
colnames(CVs) <- c("Tube.ID",  "Mean.Scale",  "SD.Scale") #rename the columns of the dataframe
CVs$CV <- (CVs$SD.Scale/CVs$Mean.Scale)*100 #calculate CV of the scale bar measurements
range(CVs$CV) #display min and max of scale CV within a tube
Grand.CV <- (sd(na.omit(size$Scale))/mean(na.omit(size$Scale)))*100#calcualte the overall CV
Grand.CV #coefficient of variation in scale bar between all samples ~2%
data <- merge(size, info, by="Tube.ID") #merge data and info
data$Ratio <- data$Width/data$Length #calcualte width to length ratio
means <- aggregate(cbind(Length, Width,Area, Ratio)  ~ Treatment*Time*Trial, data=data, mean, na.rm=TRUE) #calculate mean
ses <- aggregate(cbind(Length, Width,Area, Ratio) ~ Treatment*Time*Trial, data=data, std.error, na.rm=TRUE) #calculate standard error
sizes <- cbind(means, ses$Length, ses$Width, ses$Area, ses$Ratio)
colnames(sizes) <- c("Treatment","Time", "Trial", "Length", "Width", "Area", "Ratio", "Length.se", "Width.se", "Area.se", "Ratio.se")
Fig.Length <- ggplot(sizes, aes(x=Time, y=Length, group=Treatment)) +
geom_errorbar(aes(ymin=Length-Length.se, ymax=Length+Length.se), colour="black", width=.1, position = position_dodge(width = 0.2)) + #plot sem
geom_point(aes(shape=Treatment), position = position_dodge(width = 0.2), size=2) + #plot points
geom_line(aes(linetype=Treatment), position = position_dodge(width = 0.2), size = 0.5) + #add lines
xlab("Time") + #Label the X Axis
ylab("Shell Length mm") + #Label the Y Axis
theme_bw() + #Set the background color
theme(axis.line = element_line(color = 'black'), #Set the axes color
axis.title=element_text(size=14,face="bold"), #Set axis format
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), #Set the text angle
panel.border = element_blank(), #Set the border
axis.line.x = element_line(color = 'black'), #Set the axes color
axis.line.y = element_line(color = 'black'), #Set the axes color
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background =element_blank(), #Set the plot background
legend.key = element_blank(), #Set plot legend key
legend.position=c(0.8,0.3)) #set legend position
Fig.Length
View(sizes)
##### Larval Counts #####
larval.counts <- read.csv("Larval_Counts_Trial3.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
larval.counts$Avg.Live <- rowMeans(larval.counts[,c("Live1",  "Live2",  "Live3")], na.rm = TRUE) #calculate average of counts
larval.counts$Avg.Dead <- rowMeans(larval.counts[,c("Dead1",  "Dead2",  "Dead3")], na.rm = TRUE) #calculate average of counts
larval.counts$Live.cells.ml <- larval.counts$Avg.Live/larval.counts$Volume.Counted.ml #calculate density
larval.counts$Dead.cells.ml <- larval.counts$Avg.Dead/larval.counts$Volume.Counted.ml #calculate density
larval.counts$total.live.larvae <- larval.counts$Live.cells.ml*larval.counts$Vol.Tripour
larval.counts$total.dead.larvae <- larval.counts$Dead.cells.ml*larval.counts$Vol.Tripour
larval.counts$per.sur <- ((larval.counts$total.live.larvae/(larval.counts$total.live.larvae[1]))*100)
#calculate mean and se of live larvae
larval.counts.means <- aggregate(total.live.larvae ~ Day*Treatment, data=larval.counts, mean)
larval.counts.ses <- aggregate(total.live.larvae ~ Day*Treatment, data=larval.counts, std.error)
means <- cbind(larval.counts.means, larval.counts.ses$total.live.larvae) #create dataframe
colnames(means) <- c("Day", "Treatment","mean","se") #rename columns
#calculate mean and se of percent survival
larval.survival.means <- aggregate(per.sur ~ Day*Treatment, data=larval.counts, mean)
larval.survival.ses <- aggregate(per.sur ~ Day*Treatment, data=larval.counts, std.error)
sur.means <- cbind(larval.survival.means, larval.survival.ses$per.sur) #create dataframe
colnames(sur.means) <- c("Day", "Treatment","mean","se") #rename columns
#plot survivorship
Fig.Survivorship <- ggplot(sur.means, aes(x=Day, y=mean, group=Treatment)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.1, position = position_dodge(width = 0.2)) + #plot sem
geom_point(aes(shape=Treatment), position = position_dodge(width = 0.2), size=2) + #plot points
scale_shape_manual(values=c(16,17,15,17)) +
geom_line(aes(linetype=Treatment), position = position_dodge(width = 0.2), size = 0.5) + #add lines
#scale_x_discrete(limits=c("Time0", "Time1", "Time2", "Time3", "Time4", "Time5"))+
xlab("Time") + #Label the X Axis
ylab("% Survivorship") + #Label the Y Axis
theme_bw() + #Set the background color
theme(axis.line = element_line(color = 'black'), #Set the axes color
axis.title=element_text(size=14,face="bold"), #Set axis format
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), #Set the text angle
panel.border = element_blank(), #Set the border
axis.line.x = element_line(color = 'black'), #Set the axes color
axis.line.y = element_line(color = 'black'), #Set the axes color
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background =element_blank(), #Set the plot background
legend.key = element_blank(), #Set plot legend key
legend.position=c(0.8,0.6)) #set legend position
Fig.Survivorship
#####Larval Size#####
size <- read.csv("OA_Size_Larval_Geoduck_Trial3.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
info <- read.csv("Larval_Sample.Info.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
#check the variation in the scale between pictures
CV.mean <- aggregate(Scale ~ Tube.ID, data=size, mean, na.rm=TRUE) #calculate mean
CV.sd <- aggregate(Scale ~ Tube.ID, data=size, sd, na.rm=TRUE) #calculate standard deviation
CVs <- cbind(CV.mean, CV.sd$Scale) # merge mean and sd into dataframe
colnames(CVs) <- c("Tube.ID",  "Mean.Scale",  "SD.Scale") #rename the columns of the dataframe
CVs$CV <- (CVs$SD.Scale/CVs$Mean.Scale)*100 #calculate CV of the scale bar measurements
range(CVs$CV) #display min and max of scale CV within a tube
Grand.CV <- (sd(na.omit(size$Scale))/mean(na.omit(size$Scale)))*100#calcualte the overall CV
Grand.CV #coefficient of variation in scale bar between all samples ~2%
data <- merge(size, info, by="Tube.ID") #merge data and info
data$Ratio <- data$Width/data$Length #calcualte width to length ratio
means <- aggregate(cbind(Length, Width,Area, Ratio)  ~ Treatment*Time*Trial, data=data, mean, na.rm=TRUE) #calculate mean
ses <- aggregate(cbind(Length, Width,Area, Ratio) ~ Treatment*Time*Trial, data=data, std.error, na.rm=TRUE) #calculate standard error
sizes <- cbind(means, ses$Length, ses$Width, ses$Area, ses$Ratio)
colnames(sizes) <- c("Treatment","Time", "Trial", "Length", "Width", "Area", "Ratio", "Length.se", "Width.se", "Area.se", "Ratio.se")
Fig.Length <- ggplot(sizes, aes(x=Time, y=Length, group=Treatment)) +
geom_errorbar(aes(ymin=Length-Length.se, ymax=Length+Length.se), colour="black", width=.1, position = position_dodge(width = 0.2)) + #plot sem
geom_point(aes(shape=Treatment), position = position_dodge(width = 0.2), size=2) + #plot points
geom_line(aes(linetype=Treatment), position = position_dodge(width = 0.2), size = 0.5) + #add lines
xlab("Time") + #Label the X Axis
ylab("Shell Length mm") + #Label the Y Axis
theme_bw() + #Set the background color
theme(axis.line = element_line(color = 'black'), #Set the axes color
axis.title=element_text(size=14,face="bold"), #Set axis format
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), #Set the text angle
panel.border = element_blank(), #Set the border
axis.line.x = element_line(color = 'black'), #Set the axes color
axis.line.y = element_line(color = 'black'), #Set the axes color
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background =element_blank(), #Set the plot background
legend.key = element_blank(), #Set plot legend key
legend.position=c(0.8,0.3)) #set legend position
Fig.Length
Fig.Width <- ggplot(sizes, aes(x=Time, y=Width, group=Treatment)) +
geom_errorbar(aes(ymin=Width-Width.se, ymax=Width+Width.se), colour="black", width=.1, position = position_dodge(width = 0.2)) + #plot sem
geom_point(aes(shape=Treatment), position = position_dodge(width = 0.2), size=2) + #plot points
geom_line(aes(linetype=Treatment), position = position_dodge(width = 0.2), size = 0.5) + #add lines
xlab("Time") + #Label the X Axis
ylab("Shell Width mm") + #Label the Y Axis
theme_bw() + #Set the background color
theme(axis.line = element_line(color = 'black'), #Set the axes color
axis.title=element_text(size=14,face="bold"), #Set axis format
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), #Set the text angle
panel.border = element_blank(), #Set the border
axis.line.x = element_line(color = 'black'), #Set the axes color
axis.line.y = element_line(color = 'black'), #Set the axes color
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background =element_blank(), #Set the plot background
legend.key = element_blank(), #Set plot legend key
legend.position='none') #remove legend background
Fig.Width
Fig.Area <- ggplot(sizes, aes(x=Time, y=Area, group=Treatment)) +
geom_errorbar(aes(ymin=Area-Area.se, ymax=Area+Area.se), colour="black", width=.1, position = position_dodge(width = 0.2)) + #plot sem
geom_point(aes(shape=Treatment), position = position_dodge(width = 0.2), size=2) + #plot points
geom_line(aes(linetype=Treatment), position = position_dodge(width = 0.2), size = 0.5) + #add lines
xlab("Time") + #Label the X Axis
ylab("Shell Area mm2") + #Label the Y Axis
theme_bw() + #Set the background color
theme(axis.line = element_line(color = 'black'), #Set the axes color
axis.title=element_text(size=14,face="bold"), #Set axis format
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), #Set the text angle
panel.border = element_blank(), #Set the border
axis.line.x = element_line(color = 'black'), #Set the axes color
axis.line.y = element_line(color = 'black'), #Set the axes color
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background =element_blank(), #Set the plot background
legend.key = element_blank(), #Set plot legend key
legend.position='none') #remove legend background
Fig.Area
Fig.Ratio <- ggplot(sizes, aes(x=Time, y=Ratio, group=Treatment)) +
geom_errorbar(aes(ymin=Ratio-Ratio.se, ymax=Ratio+Ratio.se), colour="black", width=.1, position = position_dodge(width = 0.2)) + #plot sem
geom_point(aes(shape=Treatment), position = position_dodge(width = 0.2), size=2) + #plot points
geom_line(aes(linetype=Treatment), position = position_dodge(width = 0.2), size = 0.5) + #add lines
xlab("Time") + #Label the X Axis
ylab("Shell Ratio (W:L)") + #Label the Y Axis
theme_bw() + #Set the background color
theme(axis.line = element_line(color = 'black'), #Set the axes color
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), #Set the text angle
axis.title=element_text(size=14,face="bold"), #Set axis format
panel.border = element_blank(), #Set the border
axis.line.x = element_line(color = 'black'), #Set the axes color
axis.line.y = element_line(color = 'black'), #Set the axes color
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background =element_blank(), #Set the plot background
legend.key = element_blank(), #Set plot legend key
legend.position='none') #remove legend
Fig.Ratio
setwd("/Users/hputnam/MyProjects/Geoduck_Epi/project_larval_geoduck_OA/RAnalysis/Output")
Larval.Size <- arrangeGrob(Fig.Length, Fig.Width, Fig.Area, Fig.Survivorship, ncol=2)
ggsave(file="Larval_Size_Trial3.pdf", Larval.Size, width =8.5, height = 11, units = c("in"))
library(gridExtra)
Larval.Size <- arrangeGrob(Fig.Length, Fig.Width, Fig.Area, Fig.Survivorship, ncol=2)
ggsave(file="Larval_Size_Trial3.pdf", Larval.Size, width =8.5, height = 11, units = c("in"))
